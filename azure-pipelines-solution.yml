trigger:
- none

pool:
  vmImage: ubuntu-22.04

parameters:
- name: SUBSCRIPTION_ID
  type: string
  default: false
- name: SSH_PUBLIC_KEY
  type: string
- name: EXPIRES
  type: string
  default: false
- name: DEPLOYMENT_NAME
  type: string
  default: false
- name: RESOURCE_GROUP_LOCATION
  type: string
  default: false
- name: RESOURCE_GROUP_NAME_PREFIX
  type: string
  default: rg-miniwerk
- name: DOCKER_COMPOSITION_REPO
  type: string
  default: false
- name: DOCKER_REPO_TAG
  type: string
  default: false
- name: DOCKER_TAG_EXTRA
  type: string
  default: false
- name: VM_SIZE
  type: string
  default: false
- name: VM_DISK_SIZE
  type: string
  default: false
- name: VITE_ASSET_SET
  type: string
  default: fdf
- name: ZONE_RESOURCE_GROUP
  type: string
  default: "FDF-PVARKI-SOLUTION-static"
- name: ZONE_DNS_NAME
  type: string
  default: "solution.dev.pvarki.fi"
- name: CERTBOT_EMAIL
  type: string
  default: false
- name: WORKSPACE_NAME
  type: string
- name: CREATE
  type: boolean
  default: true
- name: DEBUG
  type: string
  default: false


variables:
  ${{ each parameter in parameters }}:
    ${{ if ne( parameter.value , false ) }}:
      TF_VAR_${{ parameter.key }}: ${{ parameter.value }}

stages:
  - stage: create_resources
    displayName: Create miniwerk resources
    jobs:
      - job: create
        condition: eq(${{ parameters.CREATE }}, 'true')
        steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: FDF-PVARKI-ORDER-Dev-Sub-Service-Connection_002
              KeyVaultName: pvarki-shared-kv001
              SecretsFilter: tfstatestoragekey #pragma: allowlist secret
              RunAsPreJob: true

          - task: TerraformTaskV4@4
            displayName: Terraform Init
            env:
              ARM_ACCESS_KEY: $(tfstatestoragekey)
            inputs:
              provider: azurerm
              command: init
              backendServiceArm: FDF-PVARKI-ORDER-Dev-Sub-Service-Connection_002
              backendAzureRmResourceGroupName: FDF-PVARKI-ORDER-Dev-common
              backendAzureRmStorageAccountName: arkitfstate
              backendAzureRmContainerName: deliveries
              backendAzureRmKey: "${{ parameters.RESOURCE_GROUP_NAME_PREFIX }}/${{ parameters.WORKSPACE_NAME }}.tfstate"

          - task: TerraformTaskV4@4
            displayName: Apply Terraform Plan
            inputs:
              provider: azurerm
              command: apply
              environmentServiceNameAzureRM: FDF-PVARKI-SOLUTION-Dev

          - task: Bash@3
            displayName: Create github issue
            inputs:
              targetType: 'inline'
              connection: github_connector
              script: |
                echo "Creating a GitHub issue..."
                curl -X POST \
                  -H "Authorization: Bearer $(GitHubToken)" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/pvarki/terraform-miniwerk-deployment/issues \
                  -d '{
                    "title": "Automated Issue: Created ${{ parameters.DEPLOYMENT_NAME }} with workspace ${{ parameters.WORKSPACE_NAME }}",
                    "body": "This issue was created by an Azure DevOps pipeline using the GitHub service connection.",
                    "labels": ["automation","instance"]
                  }'
              displayName: 'Create GitHub Issue'
              workingDirectory: $(System.DefaultWorkingDirectory)
            env:
              GitHubToken: $(serviceConnection.github_connector.auth.token)

  - stage: destroy_resources
    displayName: Destroy miniwerk resources
    jobs:
      - job: destroy
        condition: ne(${{ parameters.CREATE }}, 'true')
        steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: FDF-PVARKI-ORDER-Dev-Sub-Service-Connection_002
              KeyVaultName: pvarki-shared-kv001
              SecretsFilter: tfstatestoragekey #pragma: allowlist secret
              RunAsPreJob: true

          - task: TerraformTaskV4@4
            displayName: Terraform Init
            env:
              ARM_ACCESS_KEY: $(tfstatestoragekey)
            inputs:
              provider: azurerm
              command: init
              backendServiceArm: FDF-PVARKI-ORDER-Dev-Sub-Service-Connection_002
              backendAzureRmResourceGroupName: FDF-PVARKI-ORDER-Dev-common
              backendAzureRmStorageAccountName: arkitfstate
              backendAzureRmContainerName: deliveries
              backendAzureRmKey: "${{ parameters.RESOURCE_GROUP_NAME_PREFIX }}/${{ parameters.WORKSPACE_NAME }}.tfstate"

          - task: TerraformTaskV4@4
            displayName: Apply Terraform Destroy
            inputs:
              provider: azurerm
              command: destroy
              environmentServiceNameAzureRM: FDF-PVARKI-SOLUTION-Dev
